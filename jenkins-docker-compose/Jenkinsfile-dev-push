/* groovylint-disable NestedBlockDepth */
/* groovylint-disable-next-line CompileStatic */


pipeline {
    agent any

    options {
        skipDefaultCheckout(true) //prevent default checkout of git branch
        timestamps() //Add timestamps to the Console Output
    }

    environment{
        /*
readJSON method comes from the Pipeline Utility Steps plugin in Jenkins
        */
        def envConfig = readJSON file: "src/assets/environments/${env.environment}.config.json"
        DOCKER_HUB_CRED=credentials('dockerHubRegistryCredentials') //pulling the DockerHub crendetials saved in Jenkins-->Dashboard--->Credentials
        environ="${env.environment}" //environment info from pipeline input
        buildNumber="${env.BUILD_NUMBER}"
        branchName="${env.Branch}"
        appPort="${envConfig.port}" //fix the application port
        containerPort=80 //fix the container port
        toRepositoryName="angular-nginx-${env.environment}" //repository to which the image will be pushed
        containerName="angular-nginx-${env.environment}-container"
        serviceName="nginx-${env.environment}"
        DOCKER_HOST="tcp://172.174.255.79:2375" //connect to the remote VM's Docker daemon and not the local daemon   
        /*
You need to expose the 2375 port in the VM and also write an inbound rule to allow TCP connection to 2375
        */
    }

    stages{
        stage('Docker Workflow') {
            stages{
                stage('Clone') {
                    steps {
                        echo 'Cloning...'
                        cleanWs() //Workspace Clean Plugin to delete the workspace before cloning and building
                        //we are using the installed Git plugin to clone the branch from the repo
                        git branch: "${branchName}", url: 'https://github.com/ramyabala221190/jenkinsTest.git'
                    }
                }
              
                stage('Docker Build') {
                    steps {
                        echo 'Running Docker Compose build'
                        bat  "docker compose -f docker/docker-compose.yml build ${serviceName}"
                    }
                }

                stage('Docker login'){
                    steps {
                   echo 'Logging in to DockerHub'
                      bat  "docker login -u ${DOCKER_HUB_CRED_USR} -p ${DOCKER_HUB_CRED_PSW} docker.io"
                    //   bat  "docker image prune --force"
                    }
                }
                stage('Docker Push') {
                    
                    steps{
                        echo 'Pushing image to DockerHub'
                       bat  "docker image push ${DOCKER_HUB_CRED_USR}/${toRepositoryName}:${buildNumber}"
                    }
                    post {
                        success {
                            bat "docker logout" //logout from docker
                        }
                  
                    }
                }

                stage('Deploy to Remote VM'){
                    steps{
                        echo 'Execute SSH..'
withCredentials([sshUserPrivateKey(
    credentialsId: 'sshConnection',usernameVariable: 'username',keyFileVariable:'keyfile')]) {
        //13:28:20  Pseudo-terminal will not be allocated because stdin is not a terminal.
        sshagent(['sshConnectionToMyWindows']) {
    bat "ssh -i ${keyfile} ${username}@172.174.255.79 \
    docker --version \
    && docker image pull ${DOCKER_HUB_CRED_USR}/${toRepositoryName}:${buildNumber} \
    && docker compose -f docker/docker-compose.yml up -d --remove-orphans --no-build ${serviceName} \
    && docker cp src/assets/environments/${environ}.config.json ${containerName}:/usr/share/nginx/html/assets/environments/runtime-environment.json \
    && docker image prune --force \
    && docker ps \
    && docker images"
}  
}
                    }
                }
//                 stage('Docker Deploy and Compose Up') {
                    
//                     steps {
//                         /*
// connect to a remote server, pull the docker image and run docker compose up
//                         */
//                         echo 'Running Docker Compose Up'
//                         script{
//     bat "docker compose -f docker/docker-compose.yml up -d --remove-orphans --no-build ${serviceName}" //- d ensures it runs in deatched mode
//                             //bat "docker cp src/assets/environments/${environ}.config.json ${containerName}:/usr/share/nginx/html/assets/environments/runtime-environment.json"
//                         }
//                     }
//                 }
            }
        }
    }

}
