/* groovylint-disable NestedBlockDepth */
/* groovylint-disable-next-line CompileStatic */


pipeline {
    agent any

    options {
        skipDefaultCheckout(true) //prevent default checkout of git branch
        timestamps() //Add timestamps to the Console Output
    }

    environment{
        /*
readJSON method comes from the Pipeline Utility Steps plugin in Jenkins
        */
        targetEnv="${env.environment}" //environment info from pipeline input
        buildNumber="${env.BUILD_NUMBER}"
        branchName="${env.Branch}"
        server_ip=envServerMapping(env.environment)
        docker_daemon_port=2375
        DOCKER_HOST="tcp://${server_ip}:${docker_daemon_port}"     
        }

    stages{
        stage('Docker Workflow') {
            stages{
                stage('Clone') {
                    steps {
                        echo 'Cloning...'
                        cleanWs() //Workspace Clean Plugin to delete the workspace before cloning and building
                        //we are using the installed Git plugin to clone the branch from the repo
                        git branch: "${branchName}", url: 'https://github.com/ramyabala221190/nodejs-express-docker-nginx.git'
                    }
                }
              
             
                stage('Deploy to Remote VM'){
          
                    steps{
                        echo 'Execute SSH..'
withCredentials([sshUserPrivateKey(
    credentialsId: 'NodejsRemoteServer',usernameVariable: 'username',keyFileVariable:'keyfile')]) {
    bat "ssh -o StrictHostKeyChecking=no -i ${keyfile} ${username}@${server_ip} \
    docker --version \
    && docker compose -f docker/docker-compose.yml -f docker/docker-compose.${targetEnv}.yml build \
    && docker compose -f docker/docker-compose.yml -f docker/docker-compose.${targetEnv}.yml up -d --remove-orphans --no-build \
    && docker image prune --force \
    && docker ps \
    && docker images"
}
                    }
                }

            }
        }
    }

}

def envServerMapping(envName){

    if(envName.equals("prod")) {
        return "191.235.235.158";
    }
    else if (envName.equals("dev")){
        return "20.206.106.236";
    } 
}

