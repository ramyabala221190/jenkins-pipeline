/* groovylint-disable NestedBlockDepth */
/* groovylint-disable-next-line CompileStatic */

//global variables

def ipMap=[
    dev:'20.206.106.236',
    prod:'191.235.235.158'
]

def docker_daemon_port=2375

def git_repo_name='https://github.com/ramyabala221190/nodejs-express-docker-nginx.git'

def targetEnvironment="${env.environment}"

def target_docker_repo=[
   node:"node-${env.environment}",
   nginx:"nginx-${env.environment}"
]

def source_docker_repo=[
   node:"node-dev",
   nginx:"nginx-dev"
]

def  branchName="${env.Branch}"


pipeline {
    agent any

    options {
        skipDefaultCheckout(true) //prevent default checkout of git branch
        timestamps() //Add timestamps to the Console Output
    }


//environment variables
    environment{
        /*
readJSON method comes from the Pipeline Utility Steps plugin in Jenkins
        */
        targetEnv="${env.environment}" //environment info from pipeline input
        toNodeRepo="${target_docker_repo.node}"
        toNginxRepo="${target_docker_repo.nginx}"
        buildNumber="${env.BUILD_NUMBER}"
        DOCKER_HUB_CRED=credentials('dockerHubRegistryCredentials')
        DOCKER_HOST="tcp://${ipMap[targetEnvironment]}:${docker_daemon_port}" //uncomment when deploying to remote server     
        }

    stages{
        stage('Docker Workflow') {
            stages{
                stage('Clone') {
                    steps {
                        echo 'Cloning...'
                        cleanWs() //Workspace Clean Plugin to delete the workspace before cloning and building
                        //we are using the installed Git plugin to clone the branch from the repo
                        git branch: "${branchName}", url: "${git_repo_name}"
                    }
                }


                 stage('Docker Pull and Tag Image') {
                    steps{
                        echo 'Pulling latest image from low enviornment repository in DockerHub'
                bat "docker image pull ${DOCKER_HUB_CRED_USR}/${source_docker_repo.node}:${tag}"
                bat "docker image tag ${DOCKER_HUB_CRED_USR}/${source_docker_repo.node}:${tag} ${DOCKER_HUB_CRED_USR}/${target_docker_repo.node}:${tag}"
                bat "docker image pull ${DOCKER_HUB_CRED_USR}/${source_docker_repo.nginx}:${tag}"
                bat "docker image tag ${DOCKER_HUB_CRED_USR}/${source_docker_repo.nginx}:${tag} ${DOCKER_HUB_CRED_USR}/${target_docker_repo.nginx}:${tag}"
                    }  
                }

                    stage('Docker login'){
                    steps {
                   echo 'Logging in to DockerHub'
                       bat  "docker login -u ${DOCKER_HUB_CRED_USR} -p ${DOCKER_HUB_CRED_PSW} docker.io"
                       bat  "docker image prune --force"
                    }
                }


        
                stage('Docker Push') {
                    
                    steps{ 
                       echo 'Pushing image to DockerHub'
                       bat  "docker image push ${DOCKER_HUB_CRED_USR}/${target_docker_repo.node}:${tag}"
                       bat  "docker image push ${DOCKER_HUB_CRED_USR}/${target_docker_repo.nginx}:${tag}"

                    }
                    post {
                        success {
                            bat "docker logout" //logout from docker
                        }
                    }
                }



                // stage('Run locally'){
                //     steps{
                //         bat "docker --version \
                //         && docker compose  -p ${targetEnv}-proj -f docker/docker-compose.yml -f docker/docker-compose.${targetEnv}.yml up -d --remove-orphans --no-build \
                //         && docker image prune --force \
                //         && docker ps \
                //         && docker images"

                //     }
                // }
              
             
                stage('Deploy to Remote VM'){
          
                    steps{
                        echo 'Execute SSH..'
withCredentials([sshUserPrivateKey(
    credentialsId: 'NodejsRemoteServer',usernameVariable: 'username',keyFileVariable:'keyfile')]) {
    bat "ssh -o StrictHostKeyChecking=no -i ${keyfile} ${username}@${ipMap[targetEnvironment]} \
    docker --version \
    && docker compose  -p ${targetEnv}-proj -f docker/docker-compose.yml -f docker/docker-compose.${targetEnv}.yml up -d --remove-orphans --no-build \    
    && docker image prune --force \
    && docker ps \
    && docker images"
}
                    }
                }

            }
        }
    }

}

